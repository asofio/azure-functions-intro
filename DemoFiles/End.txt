using System;
using System.IO;
using System.Threading.Tasks;

using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.Extensions.Logging;

using FunctionsIntro.Models;

using Newtonsoft.Json;
using System.Linq;
using System.Net.Http;
using Azure.Messaging.ServiceBus;
using Microsoft.Azure.Cosmos;

namespace Sofio.Function
{
    public static class OrderHandler
    {
        private const string CosmosDatabase = "Tax";
        private const string CosmosContainer = "SalesTax";
        private const string OutboundServiceBusQueue = "OrderResult";
        private const string CosmosDBConnectionSetting = "CosmosDBConnectionString";
        private const string ServiceBusConnectionSetting = "ServiceBusConnectionString";
        private static readonly HttpClient _httpClient = new HttpClient();

        [FunctionName("OrderHandler")]
        public static async Task Run(
            [ServiceBusTrigger("InboundOrders", Connection = ServiceBusConnectionSetting)] Order order,
            [CosmosDB(
                databaseName: CosmosDatabase,
                collectionName: CosmosContainer,
                ConnectionStringSetting = CosmosDBConnectionSetting,
                Id = "{StateAbbreviation}",
                PartitionKey = "{StateAbbreviation}")] SalesTax salesTax,
            [ServiceBus(OutboundServiceBusQueue, Connection = ServiceBusConnectionSetting)] IAsyncCollector<OrderResult> sbOutput,
            ILogger log)
        {
            // Calculate total price
            decimal totalPrice = 0;
            foreach (var item in order.Items)
                totalPrice += item.Price * item.Quantity;

            // Apply sales tax
            totalPrice = totalPrice + (totalPrice * salesTax.Percentage);

            // Instantiate outbound OrderResult model
            var orderResult = new OrderResult { TotalPrice = totalPrice };

            // Query API to retrieve product name
            foreach(var item in order.Items) {
                var itemInfo = await _httpClient.GetAsync($"https://api.sampleapis.com/coffee/hot/{item.ItemId}");

                if(itemInfo.IsSuccessStatusCode) {
                    var json = await itemInfo.Content.ReadAsStringAsync();
                    var productResult = JsonConvert.DeserializeObject<ProductResult>(json);
                    
                    orderResult.Items.Add(new OrderResultItem
                    {
                        ItemId = item.ItemId,
                        ProductName = productResult.Title,
                        Price = item.Price,
                        Quantity = item.Quantity
                    });
                }
                else {
                    log.LogInformation($"Failed to pull product info for item {item.ItemId}");
                }

            }

            await sbOutput.AddAsync(orderResult);
        }
    }
}